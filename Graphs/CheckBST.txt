#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

int max (int a, int b)
{
    return a >= b ? a : b;
}

struct TreeNode
{
    int data;
    TreeNode *left;
    TreeNode *right;
};

int isBSTUtil(struct TreeNode *node, int min, int max)
{
    if (node == NULL)
        return 1;
     
    if (node->data < min || node->data > max)
        return 0;
    
    return (isBSTUtil(node->left, min, node->data)) && (isBSTUtil(node->right, node->data, max));
}

int isBST(TreeNode *node, int min, int max)
{
    return isBSTUtil(node, INT_MIN, INT_MAX);
}

struct TreeNode *CreateNode(int data)
{
    struct TreeNode *newNode = (struct TreeNode*) malloc(sizeof(struct TreeNode));
    
    if(newNode == NULL)
        return NULL;
        
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    
    return newNode;
}

/* Driver program to test above functions*/
int main() 
{ 
  struct TreeNode *root = CreateNode(4); 
  root->left        = CreateNode(2); 
  root->right       = CreateNode(5); 
  root->left->left  = CreateNode(1); 
  root->left->right = CreateNode(3);  
  
  if(isBST(root, INT_MIN, INT_MAX)) 
    printf("Is BST"); 
  else
    printf("Not a BST"); 
      
  getchar(); 
  return 0; 
}   

