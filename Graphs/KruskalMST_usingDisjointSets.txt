#include<iostream>

using namespace std;

struct Edge
{
    int src;
    int dest;
    int weight;
};

struct Graph
{
    int v;
    int e;
    Edge *edges;
};

struct Subset
{
    int parent;
    int rank;
};

Graph* createGraph(int v, int e)
{
    Graph* graph = new Graph;
    graph->v = v;
    graph->e = e;
    graph->edges = new Edge[e];
    
    return graph;
}

int Find(Subset subsets[], int i)
{
    if(subsets[i].parent != i)
        subsets[i].parent = Find(subsets, subsets[i].parent);
        
    return subsets[i].parent;
}

void Union(Subset subsets[], int x, int y)
{
    int x_root = Find(subsets, x);
    int y_root = Find(subsets, y);
    
    if(subsets[x_root].rank > subsets[y_root].rank)
        subsets[y_root].parent = x_root;
    else if(subsets[x_root].rank < subsets[y_root].rank)
        subsets[x_root].parent = y_root;
    else
    {
        subsets[y_root].parent = x_root;
        subsets[x_root].rank++;
    }
}

int myComp(const void* a, const void* b)
{
    Edge* a1 = (Edge* ) a;
    Edge* b1 = (Edge* ) b;
    
    return a1->weight > b1->weight;
}

void kruskalMST(Graph* graph)
{
    int v = graph->v;
    Edge res[v];
    Subset subsets[v];
    
    for(int i = 0; i < v; ++i)
    {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }
    
    int i = 0;
    int e = 0;
    
    qsort(graph->edges, graph->e, sizeof(graph->edges[0]), myComp);
    
    while(e < v - 1)
    {
        Edge nextEdge = graph->edges[i++];
        
        int x = Find(subsets, nextEdge.src);
        int y = Find(subsets, nextEdge.dest);
        
        if(x != y)
        {
            res[e++] = nextEdge;
            Union(subsets, x, y);
        }
        // if adding the edge results in a cycle then discard the edge
    }
    
    //print MST
    cout<<"The MST for the given graph is: \n";
    for(int i = 0 ; i < v-1; ++i)
    {
        cout<< res[i].src << "->" << res[i].dest << " " << res[i].weight << endl;
    }
}

int main()
{ 
    int v = 4;
    int e = 5;
    Graph* graph = createGraph(v, e); 
  
    // add edge 0-1 
    graph->edges[0].src = 0; 
    graph->edges[0].dest = 1; 
    graph->edges[0].weight = 10; 
  
    // add edge 0-2 
    graph->edges[1].src = 0; 
    graph->edges[1].dest = 2; 
    graph->edges[1].weight = 6; 
  
    // add edge 0-3 
    graph->edges[2].src = 0; 
    graph->edges[2].dest = 3; 
    graph->edges[2].weight = 5; 
  
    // add edge 1-3 
    graph->edges[3].src = 1; 
    graph->edges[3].dest = 3; 
    graph->edges[3].weight = 15; 
  
    // add edge 2-3 
    graph->edges[4].src = 2; 
    graph->edges[4].dest = 3; 
    graph->edges[4].weight = 4; 
    
    kruskalMST(graph);
    
    return 0;
}