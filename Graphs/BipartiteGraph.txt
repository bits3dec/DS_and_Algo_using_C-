#include<iostream>
#include<queue>

#define V 4

using namespace std;

/* -1 -> No colour
    0 -> 1st colour
    1 -> 2nd colour
*/

bool IsBiPartititeUtil(int src, int colArr[], int G[][V])
{
    queue<int> q;
    
    colArr[src] = 0;
    q.push(src);
    
    while(q.empty() == false)
    {
        int u = q.front();
        q.pop();
        
        if(G[u][u] == 1)
            return false; //self loop
        
        for(int v = 0; v < V; ++v)
        {
            if(G[u][v] == 1 && colArr[v] == -1)
            {
                colArr[v] = 1 - colArr[u];
                q.push(v);
            }
            else if(G[u][v] == 1 && colArr[v] == colArr[u])
                return false;
        }
    }
    
    return true;
}

bool IsBipartite(int G[][V])
{
    int *colArr = new int[V];
    for(int i = 0; i < V; ++i)
        colArr[i] = -1;
    
    for(int i = 0; i < V; ++i)
        if(colArr[i] == -1 && IsBiPartititeUtil(i, colArr, G) == false)
            return false;

    return true;
}

int main()
{
    int G[][V] = { {0, 1, 0, 1},
                   {1, 0, 1, 0},
                   {0, 1, 0, 1},
                   {1, 0, 1, 0}
                 };
                 
    if(IsBipartite(G))
        cout << "The given graph is a Bipartite graph \n";
    else
        cout << "The given graph is not a Bipartite graph \n";
        
    return 0;
}