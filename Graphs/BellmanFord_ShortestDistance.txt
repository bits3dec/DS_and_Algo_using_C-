#include<iostream>
#include<list>
#include<queue>
#include<limits.h>

using namespace std;

class Graph
{
    int V;
    list<int> *adj;
    bool Contains(queue<int> q, int v);
    
    public: 
    Graph (int v);
    void addEdge(int u, int v);
    void BellmanFordAlgorithm(int s, int weight[5][5]);
    void printResult(int s, int path[5], int disatnce[5]);
};

Graph :: Graph(int v)
{
    V = v;
    adj = new list<int> [V];
}

void Graph :: addEdge(int u, int v)
{
    adj[u].push_back(v);
}

void Graph :: BellmanFordAlgorithm(int s, int weight[5][5])
{
    queue<int> q;
    int *distance = new int [5];
    int *path = new int [5];
        
    for(int i = 0; i < 5; ++i)
        distance[i] = INT_MAX;
    
    q.push(s);
    distance[s] = 0;
    path[s] = s;
    
    while(q.empty() == false)
    {
        int u = q.front();
        q.pop();
        
        list<int> :: iterator i;
        for(i = adj[u].begin(); i != adj[u].end(); ++i)
        {
            int v = *i;
            int newDistance = distance[u] + weight[u][v];
            
            if(newDistance < distance[v])
            {
                distance[v] = newDistance;
                path[v] = u;
                
                //check if the adjacent vertice exist in the queue and if not add it to the queue
                bool foundItem = Contains(q, v);
                
                if(foundItem == false)
                    q.push(v);
            }
        }
    }
    printResult(s, path, distance);
}

bool Graph :: Contains(queue<int> q, int v)
{
   bool contains = false;
   queue<int> tempQueue = q;
   while(tempQueue.empty() == false)
   {
        int item = tempQueue.front();
        if(item == v)
        {
            contains = true;
            break;
        }
        tempQueue.pop();
   }
   
   return contains;
}

void Graph :: printResult(int s, int path[5], int distance[5])
{
    cout<< "The shortest path from source " << s << " is : \n";
    for(int i = 0; i < 5; ++i)
    {
        cout<< "Node: "<< i<< " ";
        cout<< "Path: "<< path[i] << " ";
        cout<< "Distance: "<< distance[i]<< endl;
    }
        
}

int main()
{
    Graph g(5);
    g.addEdge(0,1);
    g.addEdge(0,2);
    g.addEdge(1,2);
    g.addEdge(1,3);
    g.addEdge(1,4);
    g.addEdge(3,2);
    g.addEdge(3,1);
    g.addEdge(4,3);
    
    int weight[5][5] = { {0, -1, 4, 0, 0},
                         {0, 0, 3, 2, 2},
                         {0, 0, 0, 0, 0},
                         {0, 1, 5, 0, 0},
                         {0, 0, 0, -3, 0}
                       };
    
    g.BellmanFordAlgorithm(0, weight);
    
    return 0;
}