#include<iostream>
#include<list>
#include<queue>

using namespace std;

class Graph
{
    int V;
    list<int> *adj;
    
    public:
    Graph(int V);
    void addEdge(int u, int v);
    void BFS(int s);
};

Graph :: Graph (int V)
{
    this->V = V;
    adj = new list<int> [V];
}

void Graph :: addEdge(int u, int v)
{
    adj[u].push_back(v); // Directed Edge  u ------> v
}

void Graph :: BFS(int s)
{
    queue<int> q;
    bool *visited = new bool[V];
    
    for(int i = 0; i < V; ++i)
        visited[i] = false;
    
    q.push(s);
	visited[s] = true;
    
    while(q.empty() == false)
    {
        int u = q.front();
        q.pop();
        
        cout << u << " ";
        
        list<int> :: iterator i;
        for(i = adj[u].begin(); i != adj[u].end(); ++i)
        {
            if(visited[*i] == false)
			{
                q.push(*i);
				visited[*i] = true;
		    }
        }
    }
}

int main()
{
    // Create a graph given in the above diagram 
    Graph g(4); 
    g.addEdge(0, 1); 
    g.addEdge(0, 2); 
    g.addEdge(1, 2); 
    g.addEdge(2, 0); 
    g.addEdge(2, 3); 
    g.addEdge(3, 3); 
  
    cout << "Following is Breadth First Traversal "
         << "(starting from vertex 2) \n"; 
    g.BFS(2); 
    
    return 0;
}
