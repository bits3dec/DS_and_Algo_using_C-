#include<iostream>
#include<list>

#define NIL -1

using namespace std;

// Detecting cycle in undirected Graph using DFS
class Graph
{
    int v;
    list<int> *adj;
    bool isCyclicUtil(int u, bool visited[], int parent[]);
    
    public:
    Graph(int v);
    void AddEdge(int u, int v);
    bool IsCyclic();
};

Graph :: Graph(int v)
{
    this->v = v;
    adj = new list<int>[v];
}

void Graph :: AddEdge(int u, int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

bool Graph :: isCyclicUtil(int u, bool visited[], int parent[])
{
    visited[u] = true;
    
    list<int> :: iterator i;
    for(i = adj[u].begin(); i != adj[u].end(); ++i)
    {
        parent[*i] = u;
        if(visited[*i] == false  && isCyclicUtil(*i, visited, parent))
            return true;
        else if(parent[u] != *i)
            return true;
    }
    
    return false;
}

bool Graph :: IsCyclic()
{
    bool *visited = new bool[v];
    int *parent = new int[v];

    for(int i = 0; i < v; ++i)
    {
        visited[i] = false;
        parent[i] = NIL;
    }
    
    for(int i = 0; i < v; ++i)
        if(visited[i] == false && isCyclicUtil(i, visited, parent))
            return true;
    
    return false;
}

// Driver program to test above functions 
int main() 
{ 
    // Create a graph given in the above diagram 
    Graph G(6); 
    G.AddEdge(0, 1); 
    G.AddEdge(1, 2); 
    G.AddEdge(2, 0); 
    G.AddEdge(3, 4); 
    G.AddEdge(4, 5); 
  
    if (G.IsCyclic()) 
        cout << "Yes"; 
    else
        cout << "No"; 
  
    return 0; 
} 
