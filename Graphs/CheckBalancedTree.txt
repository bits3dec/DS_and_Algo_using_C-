#include<stdio.h>
#include<stdlib.h>

struct TreeNode
{
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};

struct TreeNode *newNode(int data) 
{ 
    struct TreeNode *node = (struct TreeNode*) malloc(sizeof(struct TreeNode)); 
    node->data = data; 
    node->left = NULL; 
    node->right = NULL; 
  
    return(node); 
} 

int max(int a, int b)
{
    return a >= b ? a : b;
}

int getHeight(struct TreeNode *node)
{
    if(node == NULL)
        return 0;
    
    return max(getHeight(node->left), getHeight(node->right)) + 1;
}

bool isBalanced(struct TreeNode *node)
{
    if(node == NULL)
        return true;
    
    int lHeight = getHeight(node->left);
    int rHeight = getHeight(node->right);
    
    if(abs(lHeight - rHeight) > 1)
        return false;
    
    return isBalanced(node->left) && isBalanced(node->right);
}

int main() 
{ 
    struct TreeNode *root = newNode(1); 
    root->left = newNode(2); 
    root->right = newNode(3); 
    root->left->left = newNode(4); 
    root->left->right = newNode(5); 
    root->right->left = newNode(4); 
    root->right->right = newNode(5); 
    root->left->left->left = newNode(8); 
  
    if(isBalanced(root)) 
      printf("Tree is balanced"); 
    else
      printf("Tree is not balanced");     
  
    getchar(); 
    return 0; 
} 