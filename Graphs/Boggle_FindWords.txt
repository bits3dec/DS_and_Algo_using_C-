#include<iostream>
#include<string.h>
#include<vector>

#define M 3
#define N 3

using namespace std;

void FindWords(char boggle[M][N]);
void FindWordsUtil(char boggle[M][N], bool visited[M][N], string str, int i, int j);
bool Contains(string str);

string dictionary[] = {"GEEKS", "QUIZ", "TEST", "FOR"};
int length = sizeof(dictionary)/sizeof(dictionary[0]);

void FindWords(char boggle[M][N])
{
    bool visited[M][N] = {{false}};
    string str = "";
    
    for(int i = 0; i < M; ++i)
        for(int j = 0; j < N; ++j)
            FindWordsUtil(boggle, visited, str, i, j);
}

void FindWordsUtil(char boggle[M][N], bool visited[M][N], string str, int i, int j)
{
    visited[i][j] = true;
    
    str = str + boggle[i][j];
    
    if(Contains(str))
        cout << str << endl;
    
    for(int row = i-1; row <= i+1 && row < M; ++row)
        for(int col = j-1; col <= j+1 && col < N; ++col)
        {    
            if(row >= 0 && col >= 0 && visited[row][col] == false)
                FindWordsUtil(boggle, visited, str, row, col);    
        }
        
    str.erase(str.length() - 1);
    
    visited[i][j] = false;
}

bool Contains(string str)
{
    for(int i = 0; i < length; ++i)
        if(dictionary[i].compare(str) == 0)
            return true;
            
    return false;
}

int main()
{
    char boggle[M][N] = { {'G', 'I', 'Z'},
                          {'U', 'E', 'K'},
                          {'Q', 'S', 'E'}
                        };
                          

    
    cout<<"Following words are present in the dictionary\n";
    
    FindWords(boggle);
    
    return 0;
}