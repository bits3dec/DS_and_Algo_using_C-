#include<iostream>
#include<queue>

using namespace std;

struct Graph
{
    int v;
    int e;
    int **adjMatrix;
};

Graph* CreateGraph(int v, int e)
{
    Graph* G = new Graph;
    
    G->v = v;
    G->e = e;
    G->adjMatrix = new int*[G->v];
    
    for(int i = 0; i < v; ++i)
        G->adjMatrix[i] = new int[v];
        
    return G;
}

void AddEdge(int u, int v, Graph* G)
{
    G->adjMatrix[u][v] = 1; //directed graph
}

int FindDegree(Graph* G, int vertex)
{
    int degree = 0;
    
    for(int i = 0; i < G->v; ++i)
    {
        if(G->adjMatrix[i][vertex] == 1)
            degree++;
    }
    
    return degree;
}

void CalculateIndegree(Graph* G, int* indegrees)
{
    for(int i = 0; i < G->v; ++i)
        indegrees[i] = FindDegree(G, i);
}

void TopologicalSort(Graph* G, int indegrees[])
{
    queue<int> q;
    int res[G->v];
    
    for(int i = 0; i < G->v; ++i)
        if(indegrees[i] == 0)
            q.push(i);
    
    int i = 0;
    while(q.empty() == false)
    {
        int u = q.front();
        q.pop();
        res[i++] = u;
        
        for(int w = 0; w < G->v; ++w)
        {
             if(G->adjMatrix[u][w])
             {
                if(--indegrees[w] == 0)
                    q.push(w);
             }
        }
    }
    
    if(i != G->v)
        cout<< "The given graph has a cycle\n";
     
    cout<<"The Topological sort of the given graph is: \n";   
    for(int i = 0; i < G->v; i++)
        cout<< res[i] << endl;
}

int main()
{
    int v = 6;
    int e = 6;

    Graph* G = CreateGraph(v, e);
    
    AddEdge(5, 2, G);
    AddEdge(5, 0, G);
    AddEdge(4, 0, G);
    AddEdge(4, 1, G);
    AddEdge(2, 3, G);
    AddEdge(3, 1, G);

    int indegrees[v];
    CalculateIndegree(G, indegrees);
    
    TopologicalSort(G, indegrees);
    
    return 0;
}
