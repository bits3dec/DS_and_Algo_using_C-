#include <iostream>
using namespace std;

struct Node
{
    int key;
    struct Node* left;
    struct Node* right;
};
typedef struct Node Node;

Node* CreateNode(int key);
Node* findLCA(Node* root, Node* n1, Node* n2);
Node* findLCAUtil(Node* root, Node* n1, Node* n2, bool &v1, bool &v2);
bool find(Node* root, Node* node);

Node* CreateNode(int key)
{
    Node* newNode = new Node;
    newNode->key = key;
    newNode->left = NULL;
    newNode->right = NULL;
    
    return newNode;
}

Node* findLCA(Node* root, Node* n1, Node* n2)
{
    bool v1;
    bool v2;
    
    Node* lca = findLCAUtil(root, n1, n2, v1, v2);
    
    if(v1 && v2 || v1 && find(root, n2) || v2 && find(root, n1)) //If both the nodes are present in the tree then return the lca node otherwise return NULL
        return lca;
    
    return NULL;   
}

Node* findLCAUtil(Node* root, Node* n1, Node* n2, bool &v1, bool &v2)  //passing by reference
{
    if(root == NULL)
        return NULL;
            
    if(root->key == n1->key)
    {
        v1 = true;
        return root;
    }
    
    if(root->key == n2->key)
    {
        v2 = true;
        return root;
    }
    
    Node* leftLCA = findLCAUtil(root->left, n1, n2, v1, v2);
    Node* rightLCA = findLCAUtil(root->right, n1, n2, v1, v2);
    
    if(leftLCA && rightLCA)
        return root;
    
    if(leftLCA != NULL)
        return leftLCA;
        
    return NULL;
}

bool find(Node* root, Node* node)
{
    if(root == NULL)
        return false;
    
    if(root->key == node->key)
        return true;
    
    if(find(root->left, node) || find(root->right, node))
        return true;
    
    return false;
}

int main() 
{ 
    // Let us create binary tree given in the above example 
    Node* root = CreateNode(1); 
    root->left = CreateNode(2); 
    root->right = CreateNode(3); 
    root->left->left = CreateNode(4); 
    root->left->right = CreateNode(5); 
    root->right->left = CreateNode(6); 
    root->right->right = CreateNode(7); 
    Node* lca =  findLCA(root, root->left->left, root->left->right); 
    if (lca != NULL) 
       cout << "LCA(4, 5) = " << lca->key; 
    else
       cout << "Keys are not present "; 
       
    lca =  findLCA(root, root->left->left, CreateNode(10)); 
    if (lca != NULL) 
       cout << "\nLCA(4, 10) = " << lca->key; 
    else
       cout << "\nKeys are not present ";    
  
    return 0; 
}